#pragma kernel SubdivideSector
#pragma kernel PopScatterSector

struct RodData
{
    int sector;
    float3 cornerVertex0; // 3 vertices of the rod
    float3 cornerVertex1;
    float3 cornerVertex2;
    float3 borderVertex0; // 3 vertices
    float3 borderVertex1;
    float3 borderVertex2;
    
    float surfaceArea;
    float3 center;
};

struct SectorData
{
    int id;
    float3 cornerVertex0; // vertices of the larger triangle
    float3 cornerVertex1;
    float3 cornerVertex2;
};

int resolution; // Number of vertices along each edge (>=2)
int rodCountPerSector; // Expected to equal (resolution-1)^2
int rodCountTotal; // Total rods = rodCountPerSector * (number of sectors)
float displacementFactor;

RWStructuredBuffer<SectorData> sectors; // e.g., 20 sectors
RWStructuredBuffer<RodData> rods; // rodCountTotal entries
RWStructuredBuffer<int> triangulation; // Triangulation for 1 sector
RWStructuredBuffer<float3> vertices; // All vertices for all sectors

uint GetRowIndex(uint index)
{
    return floor(sqrt(index));
    //return (uint) floor((-1.0 + sqrt(1.0 + 8.0 * index)) / 2.0);
}

uint GetInRowIndex(uint index, uint row)
{
    return index - (row * row);
}

uint GetRowVertex(uint index)
{
    return (uint) floor((-1.0 + sqrt(1.0 + 8.0 * index)) / 2.0);
}

uint GetInRowVertex(uint index, uint row)
{
    return index - (row * (row + 1)) / 2;
}

float3 GridPoint(uint vertex, uint resolution, float3 A, float3 B, float3 C)
{
    uint row = GetRowVertex(vertex);
    uint col = GetInRowVertex(vertex, row);

    float s = float(row) / float(resolution - 1); // Normalize row index
    float3 vab = lerp(A, B, s);
    float3 vac = lerp(A, C, s);
    if (row == 0) // if row = 0, then it will just be at the A position, so prevent dividing by 0
    {
        return A;
    }
    float3 vpoint = lerp(vab, vac, float(col) / float(row)); // Correct col scaling
    return vpoint;
}

int GetVertex0(uint triangleRow, uint triangleInRow) //0, 0 returns 0
{
    return int((triangleRow * (triangleRow + 1.0f)) / 2.0f + (triangleInRow / 2.0f));
}

int GetVertex1(uint triangleRow, uint triangleInRow) //0, 0 returns 1
{
    int baseIndex = int(((triangleRow + 1.0f) * (triangleRow + 2.0f)) / 2.0f + (triangleInRow / 2.0f));
    return (triangleInRow % 2 == 0) ? baseIndex : baseIndex + 1;
}

int GetVertex2(uint triangleRow, uint triangleInRow) //0, 0 returns 2
{
    int baseIndex = int(((triangleRow + 1.0f) * (triangleRow + 2.0f)) / 2.0f + (triangleInRow / 2.0f));
    return (triangleInRow % 2 == 0) ? baseIndex + 1 : GetVertex0(triangleRow, triangleInRow) + 1;
}

void MapToTriangle(uint index, uint resolution, float3 A, float3 B, float3 C, out float3 v0, out float3 v1, out float3 v2)
{
    uint rowIndex = GetRowIndex(index);
    uint inRowIndex = GetInRowIndex(index, rowIndex);
    
    v0 = GridPoint(GetVertex0(rowIndex, inRowIndex), resolution, A, B, C);
    v1 = GridPoint(GetVertex1(rowIndex, inRowIndex), resolution, A, B, C);
    v2 = GridPoint(GetVertex2(rowIndex, inRowIndex), resolution, A, B, C);
}

[numthreads(64, 1, 1)]
void SubdivideSector(uint3 threadID : SV_DispatchThreadID)
{
    // Global index provided from dispatch.
    uint globalIndex = threadID.x;
    
    // Determine the sector and the local rod (cell) index.
    uint sectorIndex = globalIndex / rodCountPerSector;
    uint localRodIndex = globalIndex % rodCountPerSector;
    
    float3 v0, v1, v2;
    MapToTriangle(localRodIndex, resolution,
        sectors[sectorIndex].cornerVertex0, sectors[sectorIndex].cornerVertex1, sectors[sectorIndex].cornerVertex2,
        v0, v1, v2);
    
    // Store the rod data
    rods[globalIndex].sector = sectorIndex;
    rods[globalIndex].cornerVertex0 = v0;
    rods[globalIndex].cornerVertex1 = v1;
    rods[globalIndex].cornerVertex2 = v2;
    
    if (sectorIndex == 0)
    {
        uint triangulationIndex = localRodIndex * 3;
        triangulation[triangulationIndex] = triangulationIndex;
        triangulation[triangulationIndex + 1] = triangulationIndex + 1;
        triangulation[triangulationIndex + 2] = triangulationIndex + 2;
    }
}

float hash(uint n)
{
				// integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float3 ScatterVector(float3 A, float displacement)
{
    float3 vector0 = float3(
            hash(uint((A.x + 100.0f) * 10000)),
            hash(uint((A.y + 100.0f) * 10000)),
            hash(uint((A.z + 100.0f) * 10000))
        );
    vector0 = normalize(vector0) * displacement;
    return normalize(A + vector0);
}

[numthreads(64, 1, 1)]
void PopScatterSector(uint3 threadID : SV_DispatchThreadID)
{
    uint globalIndex = threadID.x;
    
    uint sectorIndex = globalIndex / rodCountPerSector;
    uint localRodIndex = globalIndex % rodCountPerSector;
    
    rods[globalIndex].cornerVertex0 = normalize(rods[globalIndex].cornerVertex0);
    rods[globalIndex].cornerVertex1 = normalize(rods[globalIndex].cornerVertex1);
    rods[globalIndex].cornerVertex2 = normalize(rods[globalIndex].cornerVertex2);
    
    if (displacementFactor > 0)
    {
        float maxDisplacement = 1.0f / resolution / 2.0f; // Only want it to be able to go halfway to another vertex
        maxDisplacement *= displacementFactor; // displacement Factor is a value between 0 and 1, will limit the scattering of each vertex
        
        rods[globalIndex].cornerVertex0 = ScatterVector(rods[globalIndex].cornerVertex0, maxDisplacement);
        rods[globalIndex].cornerVertex1 = ScatterVector(rods[globalIndex].cornerVertex1, maxDisplacement);
        rods[globalIndex].cornerVertex2 = ScatterVector(rods[globalIndex].cornerVertex2, maxDisplacement);
    }
    
    float3 center = (rods[globalIndex].cornerVertex0 + rods[globalIndex].cornerVertex1 + rods[globalIndex].cornerVertex2) / 3.0f;

    // Calculate the surface area of the triangle
    float3 edge1 = rods[globalIndex].cornerVertex1 - rods[globalIndex].cornerVertex0;
    float3 edge2 = rods[globalIndex].cornerVertex2 - rods[globalIndex].cornerVertex0;
    float surfaceArea = 0.5f * length(cross(edge1, edge2)); // Cross product gives area of parallelogram, divide by 2 for triangle
    
    uint vertexIndex = globalIndex * 3;
    vertices[vertexIndex] = rods[globalIndex].cornerVertex0;
    vertices[vertexIndex + 1] = rods[globalIndex].cornerVertex1;
    vertices[vertexIndex + 2] = rods[globalIndex].cornerVertex2;
}
