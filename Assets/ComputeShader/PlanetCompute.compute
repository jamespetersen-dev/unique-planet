#pragma kernel SubdivideSector
#pragma kernel PopScatterSector
#pragma kernel MoonAffect

struct RodData
{
    int sector;
    float3 cornerVertex0; // 3 vertices of the rod
    float3 cornerVertex1;
    float3 cornerVertex2;
    float3 borderVertex0; // 3 vertices
    float3 borderVertex1;
    float3 borderVertex2;
    
    float surfaceArea;
    float3 center;
    float3 perpendicularity;
    float displacement;
};

struct SectorData
{
    int id;
    float3 cornerVertex0; // vertices of the larger triangle
    float3 cornerVertex1;
    float3 cornerVertex2;
};
struct MoonData
{
    float3 position;
    float size;
    float gravitationalRange;
    float gravitationalStrength;
};

int resolution; // Number of vertices along each edge (>=2)
int rodCountPerSector; // Expected to equal (resolution-1)^2
int rodCountTotal; // Total rods = rodCountPerSector * (number of sectors)
int moonCount;
float displacementFactor;
float rodLength;
float outerRange;
float innerRange;
float borderHeight;
float anchorHeight;
float planetRadius;
uint pylonsRate;

RWStructuredBuffer<SectorData> sectors; // 20 sectors
RWStructuredBuffer<RodData> rods; // rodCountTotal entries
RWStructuredBuffer<int> triangulation; // Triangulation for 1 sector
RWStructuredBuffer<float3> vertices; // All vertices for all sectors
RWStructuredBuffer<float3> normals; 
RWStructuredBuffer<MoonData> moons; 

uint GetRowIndex(uint index)
{
    return floor(sqrt(index));
    //return (uint) floor((-1.0 + sqrt(1.0 + 8.0 * index)) / 2.0);
}

uint GetInRowIndex(uint index, uint row)
{
    return index - (row * row);
}

uint GetRowVertex(uint index)
{
    return (uint) floor((-1.0 + sqrt(1.0 + 8.0 * index)) / 2.0);
}

uint GetInRowVertex(uint index, uint row)
{
    return index - (row * (row + 1)) / 2;
}

float3 GridPoint(uint vertex, uint resolution, float3 A, float3 B, float3 C)
{
    uint row = GetRowVertex(vertex);
    uint col = GetInRowVertex(vertex, row);

    float s = float(row) / float(resolution - 1); // Normalize row index
    float3 vab = lerp(A, B, s);
    float3 vac = lerp(A, C, s);
    if (row == 0) // if row = 0, then it will just be at the A position, so prevent dividing by 0
    {
        return A;
    }
    float3 vpoint = lerp(vab, vac, float(col) / float(row)); // Correct col scaling
    return vpoint;
}

int GetVertex0(uint triangleRow, uint triangleInRow) //0, 0 returns 0
{
    return int((triangleRow * (triangleRow + 1.0f)) / 2.0f + (triangleInRow / 2.0f));
}

int GetVertex1(uint triangleRow, uint triangleInRow) //0, 0 returns 1
{
    int baseIndex = int(((triangleRow + 1.0f) * (triangleRow + 2.0f)) / 2.0f + (triangleInRow / 2.0f));
    return (triangleInRow % 2 == 0) ? baseIndex : baseIndex + 1;
}

int GetVertex2(uint triangleRow, uint triangleInRow) //0, 0 returns 2
{
    int baseIndex = int(((triangleRow + 1.0f) * (triangleRow + 2.0f)) / 2.0f + (triangleInRow / 2.0f));
    return (triangleInRow % 2 == 0) ? baseIndex + 1 : GetVertex0(triangleRow, triangleInRow) + 1;
}

void MapToTriangle(uint index, uint resolution, float3 A, float3 B, float3 C, out float3 v0, out float3 v1, out float3 v2)
{
    uint rowIndex = GetRowIndex(index);
    uint inRowIndex = GetInRowIndex(index, rowIndex);
    
    v0 = GridPoint(GetVertex0(rowIndex, inRowIndex), resolution, A, B, C);
    v1 = GridPoint(GetVertex1(rowIndex, inRowIndex), resolution, A, B, C);
    v2 = GridPoint(GetVertex2(rowIndex, inRowIndex), resolution, A, B, C);
}

[numthreads(64, 1, 1)]
void SubdivideSector(uint3 threadID : SV_DispatchThreadID)
{
    // Global index provided from dispatch.
    uint globalIndex = threadID.x;
    
    // Determine the sector and the local rod (cell) index.
    uint sectorIndex = globalIndex / rodCountPerSector;
    uint localRodIndex = globalIndex % rodCountPerSector;
    
    float3 v0, v1, v2;
    MapToTriangle(localRodIndex, resolution,
        sectors[sectorIndex].cornerVertex0, sectors[sectorIndex].cornerVertex1, sectors[sectorIndex].cornerVertex2,
        v0, v1, v2);
    
    // Store the rod data
    rods[globalIndex].sector = sectorIndex;
    rods[globalIndex].cornerVertex0 = v0;
    rods[globalIndex].cornerVertex1 = v1;
    rods[globalIndex].cornerVertex2 = v2;
    
    if (sectorIndex == 0)
    {
        uint triangulationIndex = localRodIndex * 21;
        uint vertexIndex = localRodIndex * 6;
        
        //Top Triangle
        triangulation[triangulationIndex] = vertexIndex;
        triangulation[triangulationIndex + 1] = vertexIndex + 1;
        triangulation[triangulationIndex + 2] = vertexIndex + 2;
        
        //Quad 0
        triangulation[triangulationIndex + 3] = vertexIndex + 0;
        triangulation[triangulationIndex + 4] = vertexIndex + 3;
        triangulation[triangulationIndex + 5] = vertexIndex + 1;
        triangulation[triangulationIndex + 6] = vertexIndex + 3;
        triangulation[triangulationIndex + 7] = vertexIndex + 4;
        triangulation[triangulationIndex + 8] = vertexIndex + 1;
        
        //Quad 1
        triangulation[triangulationIndex + 9] = vertexIndex + 1;
        triangulation[triangulationIndex + 10] = vertexIndex + 4;
        triangulation[triangulationIndex + 11] = vertexIndex + 2;
        triangulation[triangulationIndex + 12] = vertexIndex + 4;
        triangulation[triangulationIndex + 13] = vertexIndex + 5;
        triangulation[triangulationIndex + 14] = vertexIndex + 2;
        
        //Quad 2
        triangulation[triangulationIndex + 15] = vertexIndex + 2;
        triangulation[triangulationIndex + 16] = vertexIndex + 5;
        triangulation[triangulationIndex + 17] = vertexIndex + 0;
        triangulation[triangulationIndex + 18] = vertexIndex + 5;
        triangulation[triangulationIndex + 19] = vertexIndex + 3;
        triangulation[triangulationIndex + 20] = vertexIndex + 0;
    }
}

float hash(uint n)
{
				// integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float3 ScatterVector(float3 A, float displacement)
{
    float3 vector0 = float3(
            hash(uint((A.x + 123.4f) * 10000)),
            hash(uint((A.y + 56.7f) * 10000)),
            hash(uint((A.z + 89.0f) * 10000))
        );
    vector0 = normalize(vector0) * displacement * planetRadius;
    return normalize(A + vector0) * planetRadius;
}

uint GetRandomDifferentGlobalIndex(uint globalIndex, uint totalCount)
{
    uint randomIndex = globalIndex;
    
    randomIndex = hash(randomIndex) * totalCount;
    
    if (randomIndex == globalIndex)
    {
        randomIndex = (randomIndex + 1) % totalCount;
    }
    
    return randomIndex;
}

void PullRod(uint globalIndex, float displacement, bool moonsSet)
{
    rods[globalIndex].displacement = displacement;
    uint vertexIndex = globalIndex * 6;
    float3 northPole = float3(0, planetRadius, 0);
    float3 southPole = float3(0, -planetRadius, 0);
    float3 center = float3(0, 0, 0);
    if (distance(northPole, rods[globalIndex].center) < innerRange * planetRadius || distance(southPole, rods[globalIndex].center) < innerRange * planetRadius)
    {
        vertices[vertexIndex] = center;
        vertices[vertexIndex + 1] = center;
        vertices[vertexIndex + 2] = center;
        vertices[vertexIndex + 3] = center;
        vertices[vertexIndex + 4] = center;
        vertices[vertexIndex + 5] = center;
        //Temporarily removing pylon functionality
        /*uint newGlobalIndex = GetRandomDifferentGlobalIndex(globalIndex, rodCountTotal);
        if (newGlobalIndex % pow(2, pylonsRate) != 0 || distance(northPole, rods[newGlobalIndex].center) < innerRange || distance(southPole, rods[newGlobalIndex].center) < innerRange)
        {
            vertices[vertexIndex] = center;
            vertices[vertexIndex + 1] = center;
            vertices[vertexIndex + 2] = center;
            vertices[vertexIndex + 3] = center;
            vertices[vertexIndex + 4] = center;
            vertices[vertexIndex + 5] = center;
        }
        else if (distance(northPole, rods[newGlobalIndex].center) < innerRange + outerRange || distance(southPole, rods[newGlobalIndex].center) < innerRange + outerRange)
        {
            vertices[vertexIndex] = center;
            vertices[vertexIndex + 1] = center;
            vertices[vertexIndex + 2] = center;
            vertices[vertexIndex + 3] = center;
            vertices[vertexIndex + 4] = center;
            vertices[vertexIndex + 5] = center;
        }
        else
        {
            if (moonsSet)
            {
                float newRodFactor = 0;
                for (int i = 0; i < moonCount; i++)
                {
                    float dist = distance(rods[newGlobalIndex].center + rods[newGlobalIndex].perpendicularity * rodLength, moons[i].position);
                    if (dist <= moons[i].size * moons[i].gravitationalRange)
                    {
                        float factor = dist / (moons[i].size * moons[i].gravitationalRange * moons[i].gravitationalStrength);
                        factor = 1 - factor;
                        newRodFactor += pow(factor * 4, 2);
                    }
                }
                float newDisplacement = rodLength * newRodFactor;
                float randomFactor = (newGlobalIndex % 60) * 0.01f;
                randomFactor += 0.2f;
                float3 newCornerVertex0 = lerp(rods[newGlobalIndex].cornerVertex0, rods[newGlobalIndex].cornerVertex1, randomFactor);
                float3 newCornerVertex1 = lerp(rods[newGlobalIndex].cornerVertex1, rods[newGlobalIndex].cornerVertex2, randomFactor);
                float3 newCornerVertex2 = lerp(rods[newGlobalIndex].cornerVertex2, rods[newGlobalIndex].cornerVertex0, randomFactor);
                float3 newBorderVertex0 = lerp(rods[newGlobalIndex].borderVertex0, rods[newGlobalIndex].borderVertex1, randomFactor);
                float3 newBorderVertex1 = lerp(rods[newGlobalIndex].borderVertex1, rods[newGlobalIndex].borderVertex2, randomFactor);
                float3 newBorderVertex2 = lerp(rods[newGlobalIndex].borderVertex2, rods[newGlobalIndex].borderVertex0, randomFactor);
                
                
                vertices[vertexIndex] = newCornerVertex0 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight * randomFactor;
                vertices[vertexIndex + 1] = newCornerVertex1 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight * (1 - randomFactor);
                vertices[vertexIndex + 2] = newCornerVertex2 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight;
                vertices[vertexIndex + 3] = newBorderVertex0 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight * randomFactor;
                vertices[vertexIndex + 4] = newBorderVertex1 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight * (1 - randomFactor);
                vertices[vertexIndex + 5] = newBorderVertex2 + rods[newGlobalIndex].perpendicularity * newDisplacement + rods[newGlobalIndex].perpendicularity * rodLength * anchorHeight;
            }
            else
            {
                vertices[vertexIndex] = rods[newGlobalIndex].cornerVertex0 + rods[newGlobalIndex].perpendicularity * rodLength;
                vertices[vertexIndex + 1] = rods[newGlobalIndex].cornerVertex1 + rods[newGlobalIndex].perpendicularity * rodLength;
                vertices[vertexIndex + 2] = rods[newGlobalIndex].cornerVertex2 + rods[newGlobalIndex].perpendicularity * rodLength;
                vertices[vertexIndex + 3] = rods[newGlobalIndex].borderVertex0 + rods[newGlobalIndex].perpendicularity * rodLength;
                vertices[vertexIndex + 4] = rods[newGlobalIndex].borderVertex1 + rods[newGlobalIndex].perpendicularity * rodLength;
                vertices[vertexIndex + 5] = rods[newGlobalIndex].borderVertex2 + rods[newGlobalIndex].perpendicularity * rodLength;
            }
        }*/
    }
    else if (distance(northPole, rods[globalIndex].center) < (innerRange + outerRange) * planetRadius || distance(southPole, rods[globalIndex].center) < (innerRange + outerRange) * planetRadius)
    {
        vertices[vertexIndex] = rods[globalIndex].cornerVertex0 * (1 + borderHeight);
        vertices[vertexIndex + 1] = rods[globalIndex].cornerVertex1 * (1 + borderHeight);
        vertices[vertexIndex + 2] = rods[globalIndex].cornerVertex2 * (1 + borderHeight);
        vertices[vertexIndex + 3] = rods[globalIndex].borderVertex0 * (1 + borderHeight);
        vertices[vertexIndex + 4] = rods[globalIndex].borderVertex1 * (1 + borderHeight);
        vertices[vertexIndex + 5] = rods[globalIndex].borderVertex2 * (1 + borderHeight);
    }
    else
    {
        vertices[vertexIndex] = rods[globalIndex].cornerVertex0 + rods[globalIndex].perpendicularity * displacement;
        vertices[vertexIndex + 1] = rods[globalIndex].cornerVertex1 + rods[globalIndex].perpendicularity * displacement;
        vertices[vertexIndex + 2] = rods[globalIndex].cornerVertex2 + rods[globalIndex].perpendicularity * displacement;
        vertices[vertexIndex + 3] = rods[globalIndex].borderVertex0 + rods[globalIndex].perpendicularity * displacement;
        vertices[vertexIndex + 4] = rods[globalIndex].borderVertex1 + rods[globalIndex].perpendicularity * displacement;
        vertices[vertexIndex + 5] = rods[globalIndex].borderVertex2 + rods[globalIndex].perpendicularity * displacement;
    }
}

[numthreads(64, 1, 1)]
void PopScatterSector(uint3 threadID : SV_DispatchThreadID)
{
    uint globalIndex = threadID.x;
    
    uint sectorIndex = globalIndex / rodCountPerSector;
    uint localRodIndex = globalIndex % rodCountPerSector;
    
    rods[globalIndex].cornerVertex0 = normalize(rods[globalIndex].cornerVertex0) * planetRadius;
    rods[globalIndex].cornerVertex1 = normalize(rods[globalIndex].cornerVertex1) * planetRadius;
    rods[globalIndex].cornerVertex2 = normalize(rods[globalIndex].cornerVertex2) * planetRadius;
    
    if (displacementFactor > 0)
    {
        float maxDisplacement = 1.0f / resolution / 2.0f; // Only want it to be able to go halfway to another vertex
        maxDisplacement *= displacementFactor; // displacement Factor is a value between 0 and 1, will limit the scattering of each vertex
        
        rods[globalIndex].cornerVertex0 = ScatterVector(rods[globalIndex].cornerVertex0, maxDisplacement);
        rods[globalIndex].cornerVertex1 = ScatterVector(rods[globalIndex].cornerVertex1, maxDisplacement);
        rods[globalIndex].cornerVertex2 = ScatterVector(rods[globalIndex].cornerVertex2, maxDisplacement);
    }
    
    rods[globalIndex].center = ((rods[globalIndex].cornerVertex0 + rods[globalIndex].cornerVertex1 + rods[globalIndex].cornerVertex2) / 3.0f);

    // Calculate the surface area of the triangle
    float3 edge1 = rods[globalIndex].cornerVertex1 - rods[globalIndex].cornerVertex0;
    float3 edge2 = rods[globalIndex].cornerVertex2 - rods[globalIndex].cornerVertex0;
    rods[globalIndex].surfaceArea = 0.5f * length(cross(edge1, edge2));
    
    float3 perpendicular = normalize(cross(edge1, edge2));
    normals[globalIndex * 6] = perpendicular;
    normals[globalIndex * 6 + 1] = perpendicular;
    normals[globalIndex * 6 + 2] = perpendicular;
    normals[globalIndex * 6 + 3] = -perpendicular;
    normals[globalIndex * 6 + 4] = -perpendicular;
    normals[globalIndex * 6 + 5] = -perpendicular;
    
    rods[globalIndex].borderVertex0 = rods[globalIndex].cornerVertex0 - perpendicular * rodLength;
    rods[globalIndex].borderVertex1 = rods[globalIndex].cornerVertex1 - perpendicular * rodLength;
    rods[globalIndex].borderVertex2 = rods[globalIndex].cornerVertex2 - perpendicular * rodLength;
    
    rods[globalIndex].perpendicularity = perpendicular;
    
    
    PullRod(globalIndex, 0, false);
    /*uint vertexIndex = globalIndex * 6;
    vertices[vertexIndex] = rods[globalIndex].cornerVertex0;
    vertices[vertexIndex + 1] = rods[globalIndex].cornerVertex1;
    vertices[vertexIndex + 2] = rods[globalIndex].cornerVertex2;
    vertices[vertexIndex + 3] = rods[globalIndex].borderVertex0;
    vertices[vertexIndex + 4] = rods[globalIndex].borderVertex1;
    vertices[vertexIndex + 5] = rods[globalIndex].borderVertex2;*/
}

[numthreads(64, 1, 1)]
void MoonAffect(uint3 threadID : SV_DispatchThreadID) {
    uint globalIndex = threadID.x;
    
    uint sectorIndex = globalIndex / rodCountPerSector;
    uint localRodIndex = globalIndex % rodCountPerSector;
    float rodFactor = 0; // 0.1f
    for (int i = 0; i < moonCount; i++)
    {
        float dist = distance(rods[globalIndex].center + rods[globalIndex].perpendicularity * rodLength, moons[i].position);
        if (dist <= moons[i].size * moons[i].gravitationalRange)
        {
            float factor = dist / (moons[i].size * moons[i].gravitationalRange);
            factor = 1 - factor;
            factor *= moons[i].gravitationalStrength;
            rodFactor += pow(factor * 4, 2);
        }
    }
    PullRod(globalIndex, rodLength * rodFactor, true);
}